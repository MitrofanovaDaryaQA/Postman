{
	"info": {
		"_postman_id": "d94d4ed4-9d87-4834-ad96-994e95fe0ff7",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19467850"
	},
	"item": [
		{
			"name": "T_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//проверить, что в body приходит правильный string вариант 1 \r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"//проверить, что в body приходит правильный string вариант 2\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "T_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Cтатус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Cпарсить response body в json \r",
							"let jsonData = pm.response.json();\r",
							"//Cпарсить request\r",
							"let req=pm.request.url.query.all();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request \r",
							"let checkName=jsonData.name\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(checkName).to.eql(jsonData.name)\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request \r",
							"let checkAge=jsonData.age\r",
							"pm.test(\"check age\", function(){\r",
							"    pm.expect(checkAge).to.eql(jsonData.age)\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"let checkSalary=jsonData.salary \r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(checkSalary).to.eql(jsonData.salary)\r",
							"})\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name1\", function (){\r",
							"    let reqName = pm.request.url.query.get(\"name\")\r",
							"    pm.expect(reqName).to.eql(jsonData.value)});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age1\", function (){\r",
							"    let reqAge = pm.request.url.query.get(\"age\")\r",
							"    pm.expect(reqAge).to.eql(jsonData.value)});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary1\", function (){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(reqSalary).to.eql(jsonData.value)});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let checkU_salary_1_5_year=jsonData.u_salary_1_5_year\r",
							"pm.test(\"check u_salary_1_5_year\", function(){\r",
							"    pm.expect(checkU_salary_1_5_year).to.eql(jsonData.u_salary_1_5_year)\r",
							"})\r",
							"\r",
							"pm.test(\"check u_salary_1_5_year\", function (){\r",
							"    let reqU_salary_1_5_year = pm.request.url.query.get(\"u_salary_1_5_year\")\r",
							"    pm.expect(reqU_salary_1_5_year).to.eql(jsonData.value)});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.replaceIn('{{$randomFirstName}}') //рандомное имя\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomFirstName}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "7000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "T_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData=pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req=pm.request.url.query.all();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let checkName=jsonData.name;\r",
							"pm.test(\"check name\",function(){\r",
							"    pm.expect(checkName).to.eql(jsonData.name)\r",
							"})\r",
							"\r",
							"pm.test(\"check name1\",function(){\r",
							"    let reqName = pm.request.url.query.get(\"name\")\r",
							"    pm.expect(reqName).to.eql(jsonData.name)\r",
							"    });\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let checkAge=jsonData.age;\r",
							"pm.test(\"check age\",function(){\r",
							"    pm.expect(checkAge).to.eql(jsonData.age)\r",
							"})\r",
							"\r",
							"pm.test(\"check age1\",function(){\r",
							"    let reqAge = pm.request.url.query.get(\"age\")\r",
							"    pm.expect(reqAge).to.eql(jsonData.age)\r",
							"    });\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let checkSalary=jsonData.salary;\r",
							"pm.test(\"check salary\",function(){\r",
							"    pm.expect(checkSalary).to.eql(jsonData.salary)\r",
							"})\r",
							"\r",
							"pm.test(\"check salary1\",function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(+reqSalary).to.eql(jsonData.salary)\r",
							"    });\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"let checkDogName=jsonData.family.pets.dog;\r",
							"pm.test(\"check dog's name\",function(){\r",
							"    pm.expect(checkDogName).to.property(\"name\")\r",
							"})\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"let checkDogAge=jsonData.family.pets.dog;\r",
							"pm.test(\"check dog's age\",function(){\r",
							"    pm.expect(checkDogAge).to.property(\"age\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"let checkDogNameLuky=jsonData.family.pets.dog.name;\r",
							"pm.test(\"check dog's name1\",function(){\r",
							"    pm.expect(checkDogNameLuky).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"let checkDogAgeFour=jsonData.family.pets.dog.age;\r",
							"pm.test(\"check dog's age1\",function(){\r",
							"    pm.expect(checkDogAgeFour).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artem",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "23",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "7000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Artem&age=23&salary=7000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Artem"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "T_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//Cпарсить request\r",
							"let req=pm.request.url.query.all();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request \r",
							"let checkName=jsonData.name\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(checkName).to.eql(jsonData.name)\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request \r",
							"let checkAge=jsonData.age\r",
							"pm.test(\"check age\", function(){\r",
							"    pm.expect(checkAge).to.eql(jsonData.age)\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"let checkSalary=jsonData.salary \r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(checkSalary).to.eql(jsonData.salary)\r",
							"})\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name1\", function (){\r",
							"    let reqName = pm.request.url.query.get(\"name\")\r",
							"    pm.expect(reqName).to.eql(jsonData.name)});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age1\", function (){\r",
							"    let reqAge = pm.request.url.query.get(\"age\")\r",
							"    pm.expect(+reqAge).to.eql(jsonData.age)});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"console.log(reqSalary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check salary-0\", function () {\r",
							"    let salary_1=jsonData.salary[0]\r",
							"  pm.expect(salary_1).to.eql(+reqSalary); \r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary-1\", function () {\r",
							"    let salary_2=jsonData.salary[1]\r",
							"  pm.expect(+salary_2).to.eql(reqSalary*2); \r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check salary-1\", function () {\r",
							"    let salary_3=jsonData.salary[2]\r",
							"  pm.expect(+salary_3).to.eql(reqSalary*3); \r",
							"});\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < jsonData.salary.length; i++){\r",
							" console.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artem",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "7000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Artem&age=23&salary=7000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Artem"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "T_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"//Отправить запрос.\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Cпарсить request\r",
							"let req=pm.request.url.query.all();\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check response\",function(){\r",
							"    pm.expect(jsonData).to.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check response1\",function(){\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check response2\",function(){\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check response3\",function(){\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check response4\",function(){\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"check response5\",function(){\r",
							"    pm.expect(jsonData).to.property(\"person\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметр start_qa_salary равен salary из request\", function(){\r",
							"      let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqSalary); \r",
							"})\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_6_months равен salary из request\", function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSalary*2); \r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_12_months равен salary из request\", function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqSalary*2.7); \r",
							"});\r",
							"\t\t\t\t\t\t\t\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary из request\", function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(reqSalary*3.3); \r",
							"});\r",
							"\t\t\t\t\t\t\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_3.5_years равен salary из request\", function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqSalary*3.8); \r",
							"});\r",
							"\t\t\t\t\t\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметре person, 1-й элемент из u_name равен salary из request\", function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqSalary); \r",
							"});\r",
							"console.log(\"name[1] =   \", jsonData.person.u_name[1])\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age из request\", function(){\r",
							"    let reqAge = pm.request.url.query.get(\"age\")\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqAge); \r",
							"});\r",
							"console.log(\"u_age =   \", jsonData.person.u_age)\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"параметр u_salary_5_years равен salary из request\", function(){\r",
							"    let reqSalary = pm.request.url.query.get(\"salary\")\r",
							" pm.expect(jsonData.person.u_salary_5_years).to.eql(reqSalary*4.2); \r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person){\r",
							"console.log(\"Property\", i, \"property value\", jsonData.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artem",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "7000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Artem&age=23&salary=7000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Artem"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		}
	]
}